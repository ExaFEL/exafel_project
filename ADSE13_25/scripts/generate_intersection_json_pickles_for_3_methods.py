'''
Script to compare unit cell dimensions between 3 different indexing methods for only those images
which were indexed by all 3 methods

Needs: combined_experiments.json & combined_reflections.pickle files for all 3 methods generated by -
       dials.combine_experiments *.json *.pickle reference_from_experiment.detector=0
       Change the paths below to point to where those combined files exist

'''
from __future__ import division

# First load all the json/pickle files
# Here 0 indicates the conventional indexing procesdure
# Other 2 methods are iota-srs and iota-ransac
from dxtbx.model.experiment_list import ExperimentListFactory as elf
from libtbx.easy_pickle import load, dump
import os
from dials.array_family import flex
from dxtbx.model.experiment_list import ExperimentList, ExperimentListDumper

# Define paths wehre combined pickle and json files will be found
base_path='/global/cscratch1/sd/asmit/LS49'
conv_path='basic_xtc_process_runs_165_255/unit_cell_plots_adse13_22'
srs_path='iota_runs_165_255/unit_cell_plots_adse13_22'
ransac_path='iota_v2_runs_165_255/unit_cell_plots_adse13_22'

# Load the experiments list and reflection tables in memory
# Conventional
explist_0=elf.from_json_file(os.path.join(base_path, conv_path, 'combined_experiments.json'))
refl_0=load(os.path.join(base_path, conv_path, 'combined_reflections.pickle'))
print ('loaded files for case-0')
# IOTA-SRS
explist_srs=elf.from_json_file(os.path.join(base_path, srs_path, 'combined_experiments.json'))
refl_srs=load(os.path.join(base_path, srs_path, 'combined_reflections.pickle'))
print ('loaded files for case-srs')
#IOTA-RANSAC
explist_ransac=elf.from_json_file(os.path.join(base_path, ransac_path, 'combined_experiments.json'))
refl_ransac=load(os.path.join(base_path, ransac_path, 'combined_reflections.pickle'))
print ('loaded files for case-ransac')


# Now get image identifier from all 3 experimentslist before taking intersection
# Image identifiers used as a proxy for timestamps in the xtc stream
cbf_0=[]
for ii, imgset in enumerate(explist_0.imagesets()):
      cbf_0.append(imgset.get_image_identifier(0).split('/')[-1])
cbf_srs=[]
for ii,imgset in enumerate(explist_srs.imagesets()):
      cbf_srs.append(imgset.get_image_identifier(0).split('/')[-1])
cbf_ransac=[]
for ii, imgset in enumerate(explist_ransac.imagesets()):
      cbf_ransac.append(imgset.get_image_identifier(0).split('/')[-1])

# Take the intersection of timestamps in all  3 lists
cbf_intersection=list(set(cbf_0).intersection(set(cbf_srs), set(cbf_ransac)))
print('done taking intersection')
#import pdb; pdb.set_trace()

# Now need to dump new experiments json/ reflection tables for each of the 3 cases containing data
# from the intersection data.

# first the conventional indexing technique
indexed_0 = flex.reflection_table()
experiments_0 = ExperimentList()

for ii, expt in enumerate(explist_0):
  ff = expt.imageset.get_image_identifier(0).split('/')[-1]
  if ff == 'idx-20180501170143366.cbf': print (ii, 'case-0')
  if ff in cbf_intersection:
    #expt = explist_0[ii]
    experiments_0.append(expt)
    refl = refl_0.select(refl_0['id']==ii)
    refl['id'] = flex.int(len(refl), len(experiments_0)-1)
    indexed_0.extend(refl)
print ('done getting new refl tables for case-0')

# SRS
indexed_srs = flex.reflection_table()
experiments_srs = ExperimentList()

for ii, expt in enumerate(explist_srs):
  ff = expt.imageset.get_image_identifier(0).split('/')[-1]
  if ff == 'idx-20180501170143366.cbf': print (ii, 'case-srs')
  if ff in cbf_intersection:
    #expt = explist_srs[ii]
    experiments_srs.append(expt)
    if ff == 'idx-20180501170143366.cbf': print (ii,'case::srs')
    refl = refl_srs.select(refl_srs['id']==ii)
    refl['id'] = flex.int(len(refl), len(experiments_srs)-1)
    indexed_srs.extend(refl)
print ('done getting new refl tables for case-srs')

# RANSAC
indexed_ransac = flex.reflection_table()
experiments_ransac = ExperimentList()

for ii, expt in enumerate(explist_ransac):
  ff = expt.imageset.get_image_identifier(0).split('/')[-1]
  if ff == 'idx-20180501170143366.cbf': print (ii, 'case-ransac')
  if ff in cbf_intersection:
    #expt = explist_ransac[ii]
    experiments_ransac.append(expt)
    refl = refl_ransac.select(refl_ransac['id']==ii)
    refl['id'] = flex.int(len(refl), len(experiments_ransac)-1)
    indexed_ransac.extend(refl)
print ('done getting new refl tables for case-ransac')

#assert len(experiments_0) == len(experiments_srs) == len(experiments_ransac), 'Mismatch in length of experiment lists. Please check carefully whether code is correct'
print ('NUmber of experiments = ', len(experiments_0))
# Dump new json and pickle files - 0
dumper=ExperimentListDumper(experiments_0)
dumper.as_json('intersection_conventional_experiments.json')
dump('intersection_conventional_reflections.pickle', indexed_0)
# Dump new json and pickle files - SRS
dumper=ExperimentListDumper(experiments_srs)
dumper.as_json('intersection_srs_experiments.json')
dump('intersection_srs_reflections.pickle', indexed_srs)
# Dump new json and pickle files - RANSAC
dumper=ExperimentListDumper(experiments_ransac)
dumper.as_json('intersection_ransac_experiments.json')
dump('intersection_ransac_reflections.pickle', indexed_ransac)
